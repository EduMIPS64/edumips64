/*
 * EduMips64 Gradle build configuration
 */

plugins {
    id 'java'
    id 'application'
    id "com.github.johnrengelman.shadow" version "4.0.3"    // Shadow plugin: to build the uber/fat/standalone jar
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.google.gwt:gwt-user:2.8.2'
    implementation 'javax.help:javahelp:2.0.05'
    testImplementation 'junit:junit:4.12'
}

mainClassName = 'org.edumips64.Main'
version = '1.2.5'
def codename = 'Eden'


/*
 * Jar tasks
 */

/*def getManifest(mainClass) {
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'SplashScreen-Image': 'images/splash.png'
        attributes 'Signature-Version': version
        attributes 'Codename': 'Eden'
        attributes "Build-Date": (new Date()).toString()
        attributes "Git-Revision": 'edumips64:master:1e6c1ae'
    }
    return manifest
}*/

def getGitRevisionId() {
  def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
  def commitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()
  return 'edumips64:' + branch + ':' + commitHash
}

jar {
    //getManifest(mainClassName)
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'SplashScreen-Image': 'images/splash.png'
        attributes 'Signature-Version': version
        attributes 'Codename': codename
        attributes "Build-Date": new Date()
        attributes "Git-Revision": getGitRevisionId() //'edumips64:master:1e6c1ae'
    }
}

task cliJar(type: Jar, dependsOn: jar) {  
    classifier = 'cli'
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.edumips64.MainCLI'
        attributes 'SplashScreen-Image': 'images/splash.png'
        attributes 'Signature-Version': version
    }
}
assemble.dependsOn(cliJar) 

shadowJar {
   classifier = 'standalone'
}


/* 
 * Documentation tasks
 */
task htmlDocsIt(type:Exec) {
    workingDir "${projectDir}/docs/user/en/src"
    commandLine "make", "html", "BUILDDIR=${buildDir}/docs/en", "SPHINXOPTS=-N -a -E -Q"
}
task htmlDocsEn(type:Exec) {
    workingDir "${projectDir}/docs/user/it/src"
    commandLine "make", "html", "BUILDDIR=${buildDir}/docs/it", "SPHINXOPTS=-N -a -E -Q"
}
task pdfDocsEn(type:Exec) {
    workingDir "${projectDir}/docs/user/en/src"
    commandLine "make", "latexpdf", "BUILDDIR=${buildDir}/docs/en", "LATEXMKOPTS=-xelatex", "SPHINXOPTS=-N -a -E -Q"
}
task pdfDocsIt(type:Exec) {
    workingDir "${projectDir}/docs/user/it/src"
    commandLine "make", "latexpdf", "BUILDDIR=${buildDir}/docs/it", "LATEXMKOPTS=-xelatex", "SPHINXOPTS=-N -a -E -Q"
}
// Catch-all task for documentation
task allDocs(type: GradleBuild) {
    tasks = ['htmlDocsIt', 'htmlDocsEn', 'pdfDocsEn', 'pdfDocsIt']
    description = 'Run all documentation tasks'
}
// Include allDocs task in check task
check.dependsOn(allDocs)