name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'


jobs:
  build-desktop:
    name: Build desktop application and docs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 11.0.3]    
    steps:
      # Set up Java development environment.
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Read the application version to use it in the name of the JAR.
      - name: Read version from gradle.properties
        id: read_version
        uses: christian-draeger/read-properties@1.0.1
        with:
          path: 'gradle.properties'
          property: 'version'

      # Compile the code, run unit tests, upload code coverage results.
      - name: Compile Java code
        run: ./gradlew compileJava
      - name: Run unit tests
        run: ./gradlew check
      - name: Codecov
        uses: codecov/codecov-action@v2.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Build docs (PDF and HTML for the in-app help)
      # The Python dependencies are fetched by Gradle.
      - name: Build all docs
        run: ./gradlew allDocs

      # Build JAR file.
      - name: Build JAR
        run: ./gradlew jar

      # Upload artifacts (manuals and JARs)
      - name: Upload English Manual PDF
        uses: actions/upload-artifact@v2.2.4
        with:
          name: English manual (PDF)
          path: ./build/docs/en/pdf/EduMIPS64.pdf
      - name: Upload Italian Manual PDF
        uses: actions/upload-artifact@v2.2.4
        with:
          name: Italian manual (PDF)
          path: ./build/docs/it/pdf/EduMIPS64.pdf

      - name: Upload JAR
        uses: actions/upload-artifact@v2.2.4
        with:
          name: JAR
          path: ./build/libs/edumips64-${{ steps.read_version.outputs.value }}.jar

  build-web:
    name: Build web application
    runs-on: ubuntu-latest
    steps:
      # Set up JDK (necessary for the core that is cross-compiled to JS)
      # and Node.JS (for the) web app itself.
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build JS Worker (Java â†’ JS)
        run: ./gradlew war
      - name: Set up Node.JS 12
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
      - name: Install JS dependencies
        run: npm install

      # Build JS application and upload artifacts for subsequent steps.
      - name: Build JS application
        run: npm run build
      - uses: actions/upload-artifact@v2
        name: Upload web application artifacts
        with:
          name: web
          path: build/gwt/war/edumips64
  
  deploy-web:
    name: Deploy web application
    runs-on: ubuntu-latest
    needs: build-web
    steps:
      # This step behaves differently in PRs and on push to master / cron.
      # Set up environment variables according to the triggering event.
      - name: Set PR environment variables
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "DEPLOYMENT_ENV=${{github.event.pull_request.number}}" >> $GITHUB_ENV
          echo "PUSH_DIR=pr/" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=Deploy code for PR ${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "ENV_URL=https://web.edumips.org/${{github.event.pull_request.number}}" >> $GITHUB_ENV
      - name: Set master push environment variables
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "DEPLOYMENT_ENV=prod" >> $GITHUB_ENV
          echo "PUSH_DIR=build/gwt/war/edumips64" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=Update Web Frontend @ ${{ github.sha }}" >> $GITHUB_ENV
          echo "ENV_URL=https://web.edumips.org" >> $GITHUB_ENV

      # Download web application built in 'build-web'
      - uses: actions/download-artifact@v2
        name: Download web application artifacts
        with:
          name: web
          path: build/gwt/war/edumips64

      # Mark the deployment as started (allows the PR to display "Deployment started" messages.)
      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.DEPLOYMENT_ENV }}
          ref: ${{ github.head_ref }}

      # Deploy the code on Github Pages.
      # Copy files to a directory to allow pushing to a subdir in the web.edumips.org repo.
      - name: Copy files to run directory
        run: mkdir -p pr/${{ github.event.pull_request.number }} && cp -r build/gwt/war/edumips64/* pr/${{ github.event.pull_request.number }}
        if: ${{ github.event_name == 'pull_request' }}
      - name: Deploy web application
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: master
          build_dir: ${{ env.PUSH_DIR }}
          repo: EduMIPS64/web.edumips.org
          keep_history: true
          commit_message: ${{ env.COMMIT_MESSAGE }}
          fqdn: web.edumips.org
        env:
          GH_PAT: ${{ secrets.PAT_WEBUI }}

      # Mark the deployment as succeeded or failed.
      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always() && github.head_ref
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ env.ENV_URL }}

  # Test the deployed web application.
  # This is only ran on pull request because runs triggered by push and schedule
  # will deploy to web.edumips.org. Given that the deployment has some latency,
  # the test will most likely run against the previously-deployed version,
  # potentially giving a false sense of security if a developer sees the test being
  # run immediately after the deployment.
  #
  # There is a separate job that periodically monitors web.edumips.org, which will
  # catch regressions.
  test-web:
    name: Test web application
    runs-on: ubuntu-latest
    needs: deploy-web
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.JS 12
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
      - name: Install JS dependencies
        run: npm install
      # Run tests against the deployed code.
      - name: Run web tests against deployed code
        uses: nick-invision/retry@v2
        env:
          PLAYWRIGHT_TARGET_URL: https://web.edumips.org/${{github.event.pull_request.number}}
        with:
          max_attempts: 10
          timeout_minutes: 2
          retry_on: error
          command: npm run test

