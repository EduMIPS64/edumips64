<!-- build.xml

     ant build file for EduMIPS64.
     (c) 2006-2013 Andrea Spadaccini and the EduMIPS64 dev team.

     Useful targets:
     - slim-jar         builds the GUI version, with no javahelp libraries.
     - standalone-jar   builds the GUI version, with embedded javahelp libraries.
     - clean            removes the jar file and the build dir
     - docs             builds the HTML and PDF docs, both in english and in
                        italian

    The output file names are in the init target.
-->
<project name="edumips64" default="slim-jar" basedir=".">
  <target name="init">
    <!-- Meta info about the simulator -->
    <property name="version" value="1.2.2" />
    <property name="codename" value="Contrada Fumata" />

    <!-- Set build file properties -->
    <property name="sourceDir" value="src/main/java/org/edumips64/" />
    <property name="webDir" value="src/main/java/org/edumips64/client/" />
    <property name="testDir" value="src/test/java/org/edumips64/" />
    <property name="testResourcesDir" value="build/resources/test" />
    <property name="outputDir" value="build" />
    <property name="webOutputDir" value="war/" />
    <property name="javadocDir" value="javadoc" />
    <property name="gwtVersion" value="2.8.0-SNAPSHOT" />

    <!-- Access the environment -->
    <property environment="env" />
    <property name="base.classpath" value="libs/javahelp-2.0.05.jar:libs/junit-4.10.jar:libs/hamcrest-core-1.3.jar:${env.CLASSPATH}" />

    <!-- File names -->
    <property name="standalone_jar_filename" value="edumips64-${version}.jar" />
    <property name="slim_jar_filename" value="edumips64-${version}-nodeps.jar" />
    <property name="cli_jar_filename" value="edumips64-${version}-cli.jar" />
    <property name="latest_jar_filename" value="edumips64-latest.jar" />
    <property name="tarbz2File" value="edumips64-${version}.tar.bz2" />

    <!-- Docs directories -->
    <property name="docs_src_it" value="docs/user/it/src" />
    <property name="docs_src_en" value="docs/user/en/src" />

    <!-- Compilation options -->
    <property name="src_java_version" value="8" />
    <property name="dst_java_version" value="8" />
    <property name="debug" value="on" />

    <!-- Arguments to gwtc and devmode targets -->
    <property name="gwt.args" value="" />

    <property name="gwt.sdk" location="libs" />
    <path id="project.class.path">
      <fileset dir="libs" includes="**/*.jar"/>
      <pathelement location="war/WEB-INF/classes"/>
      <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
    </path>
  </target>

  <target name="webLibs" depends="init" description="Copy libs to WEB-INF/lib">
    <mkdir dir="war/WEB-INF/lib" />
    <copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-2.8.0-SNAPSHOT.jar" />
    <!-- Add any additional server libs that need to be copied -->
  </target>

  <target name="compileWeb" depends="webLibs" description="Compile java source to bytecode">
    <mkdir dir="war/WEB-INF/classes"/>
    <javac srcdir="src/main/java" includes="**" encoding="utf-8"
        includeantruntime="false"
        destdir="war/WEB-INF/classes"
        source="${src_java_version}" target="${dst_java_version}" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="war/WEB-INF/classes">
      <fileset dir="src/main/java" excludes="**/*.java"/>
    </copy>
    <copy todir="war/">
      <fileset dir="utils">
        <include name="edumips64.html" />
      </fileset>
    </copy>
  </target>

  <target name="mkdirs" depends="init">
    <!-- Create directories for the compilation process. -->
    <mkdir dir="${outputDir}" />
  </target>

  <target name="gwtc" depends="compileWeb" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="256m">
      <classpath>
        <pathelement location="src/main/java"/>
        <path refid="project.class.path"/>
      </classpath>
      <arg line="-war"/>
      <arg value="war"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="org.edumips64.webclient"/>
      <arg line="-strict"/>
      <arg line="-generateJsInteropExports"/>
    </java>
  </target>

  <target name="devmode" depends="compileWeb" description="Run development mode (pass -Dgwt.args=-nosuperDevMode to fallback to classic DevMode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode" maxmemory="1g">
      <classpath>
        <pathelement location="src/main/java"/>
        <path refid="project.class.path"/>
        <pathelement location="${gwt.sdk}/gwt-codeserver.jar"/>
      </classpath>
      <arg line="-generateJsInteropExports"/>
      <arg value="-startupUrl"/>
      <arg value="edumips64.html"/>
      <arg line="-war"/>
      <arg value="war"/>
      <!-- Additional arguments like -style PRETTY, -logLevel DEBUG or -nosuperDevMode -->
      <arg line="${gwt.args}"/>
      <arg value="org.edumips64.webclient"/>
    </java>
  </target>

  <!-- *** clean *** target that cleans the built files and the build directory-->
  <target name="clean" depends="init,cleandocs">
    <delete file="${standalone_jar_filename}" />
    <delete file="${tarbz2File}" />
    <delete file="${slim_jar_filename}" />
    <delete file="${cli_jar_filename}" />
    <delete dir="${outputDir}" />
    <delete dir="${javadocDir}" />
    <delete dir="${webOutputDir}" />
  </target>

  <target name="cleandocs" depends="init">
      <delete dir="${docs_src_it}/../output" />
      <delete dir="${docs_src_en}/../output" />
      <delete file="edumips64-${version}-manual-en.pdf" />
      <delete file="edumips64-${version}-manual-it.pdf" />
  </target>

  <!-- *** javadoc *** build the javadoc -->
  <target name="javadoc" depends="init">
    <mkdir dir="${javadocDir}" />
      <javadoc
        destdir="${javadocDir}"
        author="true"
        version="true"
        use="true"
        additionalparam=" -encoding ISO-8859-1"
        sourcepath="${sourceDir}/../../"
        classpath="${base.classpath}:${base.classpath}"
        packagenames="org.edumips64.*"/>
  </target>

  <!-- *** docs *** builds all the docs (html, pdf in both languages) -->
  <target name="docs" depends="htmldoc,pdfdoc" />

  <!-- miscellaneous docs targets -->
  <target name="htmldoc" depends="html_it,html_en" />
  <target name="pdfdoc" depends="pdf_it,pdf_en" />
  <target name="docs_it" depends="html_it,pdf_it" />
  <target name="docs_en" depends="html_en,pdf_en" />

  <target name="html_it" depends="init">
      <exec executable="make" failonerror="true" dir="${docs_src_it}">
          <arg line="html"/>
      </exec>
  </target>

  <target name="html_en" depends="init">
      <exec executable="make" failonerror="true" dir="${docs_src_en}">
          <arg line="html"/>
      </exec>
  </target>

  <target name="pdf_it" depends="init">
      <exec executable="make" failonerror="true" dir="${docs_src_it}">
          <arg line="latexpdf"/>
      </exec>
      <copy file="docs/user/it/output/latex/EduMIPS64.pdf" tofile="edumips64-${version}-manual-it.pdf"/>
  </target>

  <target name="pdf_en" depends="init">
      <exec executable="make" failonerror="true" dir="${docs_src_en}">
          <arg line="latexpdf"/>
      </exec>
      <copy file="docs/user/en/output/latex/EduMIPS64.pdf" tofile="edumips64-${version}-manual-en.pdf"/>
  </target>

  <!-- *** compile *** compiles the code -->
  <target name="compile" depends="mkdirs">
    <javac
        source="${src_java_version}"
        target="${dst_java_version}"
        srcdir="${sourceDir}"
        destdir="${outputDir}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        excludes="client/**"
        includeantruntime="false"
        classpath="${base.classpath}">
        <compilerarg value="-Xlint"/>
        <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- *** test *** run unit tests-->
  <target name="test" depends="mkdirs,compile">
      <!-- prepare resources for the tests -->
      <copy todir="${testResourcesDir}">
        <fileset dir="src/test/resources/">
          <include name="**/*.*" />
        </fileset>
      </copy>

      <!-- cannot use the compile target since we'll need to compile test code
           as well. -->
      <javac
          source="${src_java_version}"
          target="${dst_java_version}"
          srcdir="${testDir}"
          destdir="${outputDir}"
          debug="${debug}"
          includeantruntime="false"
          classpath="${base.classpath}"
          debuglevel="lines,vars,source">
          <compilerarg value="-Xlint"/>
          <compilerarg value="-Xlint:-serial"/>
      </javac>

      <junit printsummary="true" haltonfailure="yes" haltonerror="yes" fork="true">
          <classpath>
              <pathelement path="${base.classpath}"/>
              <pathelement path="${outputDir}"/>
          </classpath>
          <test name="org.edumips64.CpuTests">
              <formatter type="plain" usefile="false"/>
          </test>
          <test name="org.edumips64.core.FixedBitSetTest">
              <formatter type="plain" usefile="false"/>
          </test>
          <test name="org.edumips64.core.ParserTest">
              <formatter type="plain" usefile="false"/>
          </test>
          <test name="org.edumips64.core.fpu.FPInstructionUtilsTest">
              <formatter type="plain" usefile="false"/>
          </test>
      </junit>
      <delete dir="${outputDir}" />
  </target>

  <!-- *** standalone-jar *** compile with embedded javahelp -->
  <target name="standalone-jar" depends="compile,htmldoc">
      <property name="jar_filename" value="${standalone_jar_filename}" />
      <property name="main_class" value="org.edumips64.Main" />
      <property name="splash_img" value="org/edumips64/img/splash.png"/>

      <antcall target="copy-base-files" />
      <antcall target="copy-help-files" />
      <antcall target="copy-help-libs" />
      <antcall target="make-jarfile" />
  </target>

  <!-- *** latest-jar *** like standalone-jar, but with a version-independent filename -->
  <target name="latest-jar" depends="compile,htmldoc">
      <property name="jar_filename" value="${latest_jar_filename}" />
      <property name="main_class" value="org.edumips64.Main" />
      <property name="splash_img" value="org/edumips64/img/splash.png"/>

      <antcall target="copy-base-files" />
      <antcall target="copy-help-files" />
      <antcall target="copy-help-libs" />
      <antcall target="make-jarfile" />
  </target>

  <!-- *** slim-jar *** compile without javahelp. -->
  <target name="slim-jar" depends="compile">
      <property name="jar_filename" value="${slim_jar_filename}" />
      <property name="main_class" value="org.edumips64.Main" />
      <property name="splash_img" value="org/edumips64/img/splash.png"/>

      <antcall target="make-jarfile" />
  </target>

  <!-- *** cli-jar *** runs org.edumips64.MainCLI -->
  <target name="cli-jar" depends="compile,htmldoc">
      <property name="jar_filename" value="${cli_jar_filename}" />
      <property name="main_class" value="org.edumips64.MainCLI" />

      <antcall target="make-jarfile" />
  </target>

  <target name="make-jarfile" depends="git.revision">
      <tstamp/>
      <antcall target="copy-base-files" />
      <jar destfile="${jar_filename}" basedir="${outputDir}">
          <manifest>
              <attribute name="Main-Class" value="${main_class}"/>
              <attribute name="SplashScreen-Image" value="${splash_img}"/>
              <attribute name="Signature-Version" value="${version}"/>
              <attribute name="Build-Date" value="${TODAY}"/>
              <attribute name="Codename" value="${codename}"/>
              <attribute name="Git-Revision" value="${git.revision}"/>
          </manifest>
      </jar>
      <delete dir="${outputDir}" />
      <signjar jar="${jar_filename}" keystore="utils/key-edumips" storepass="123456" keypass="123456" alias="edumips64" />
  </target>

  <!-- Utility targets to copy files. -->
  <target name="copy-help-files">
      <copy todir="${outputDir}/org/edumips64/help/en/html">
        <fileset dir="docs/user/en/output/html">
      <include name="**/*.*" />
    </fileset>
      </copy>
      <copy todir="${outputDir}/org/edumips64/help/en">
        <fileset dir="docs/user/en/javahelp">
      <include name="**/*.*" />
    </fileset>
      </copy>
      <copy todir="${outputDir}/org/edumips64/help/it/html">
        <fileset dir="docs/user/it/output/html">
      <include name="**/*.*" />
    </fileset>
      </copy>
      <copy todir="${outputDir}/org/edumips64/help/it/img">
        <fileset dir="docs/user/img">
      <include name="**/*.*" />
    </fileset>
      </copy>
      <copy todir="${outputDir}/org/edumips64/help/en/img">
        <fileset dir="docs/user/img">
      <include name="**/*.*" />
    </fileset>
      </copy>
      <copy todir="${outputDir}/org/edumips64/help/it">
        <fileset dir="docs/user/it/javahelp">
      <include name="**/*.*" />
    </fileset>
      </copy>
  </target>
  <target name="copy-base-files">
      <copy todir="${outputDir}/org/edumips64/img">
          <fileset dir="${sourceDir}/img">
      <include name="**/*.png" />
    </fileset>
  </copy>
      <copy todir="${outputDir}/org/edumips64/utils">
          <fileset dir="${sourceDir}/utils">
      <include name="**/*.properties" />
    </fileset>
  </copy>
  </target>
  <target name="copy-help-libs">
    <property name="libsDir" value="${outputDir}/tmp_libs/" />
    <unzip src="libs/javahelp-2.0.05.jar" dest="${libsDir}" />
      <copy todir="${outputDir}/com">
          <fileset dir="${libsDir}/com">
              <include name="**/*.class" />
          </fileset>
      </copy>
      <copy todir="${outputDir}/javax">
          <fileset dir="${libsDir}/javax">
              <include name="**/*.class" />
          </fileset>
      </copy>
      <delete dir="${libsDir}" />
  </target>

  <!-- Source release -->
  <target name="src-release" depends="clean,init">
    <mkdir dir="edumips64-${version}" />
    <copy todir="edumips64-${version}/">
      <fileset dir=".">
        <include name="authors" />
        <include name="build.xml" />
        <include name="ChangeLog" />
        <include name="LICENSE" />
        <include name="readme.md" />
        <include name="RELEASE_NOTES" />
        <include name="docs/**/*" />
        <include name="src/**/*" />
        <include name="utils/**/*" />
      </fileset>
    </copy>

    <tar destfile="${tarbz2File}" basedir="." includes="edumips64-${version}/" compression="bzip2" />
    <delete dir="edumips64-${version}" />
  </target>

  <!-- Fetch git commit ID (adapted from http://stackoverflow.com/a/4059546/193852) -->
  <available file=".git" type="dir" property="git.present"/>

  <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg value="rev-parse"/>
      <arg value="--short"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="repository.version" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision"/>
        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>
</project>
